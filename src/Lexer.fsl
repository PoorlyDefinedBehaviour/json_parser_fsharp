{
open FSharp.Text.Lexing
open Parser 

let newline (lexbuf: LexBuffer<_>) = 
  lexbuf.StartPos <- lexbuf.StartPos.NextLine
}

// Regular expressions
let whitespace = [' ' '\t' ]
let newline = ('\n' | '\r' '\n')
let digit = '-'? ['0'-'9']
let int = digit+
let float = digit+'.'digit+

rule tokenstream = parse
| whitespace	{ tokenstream lexbuf }
| newline	{ newline lexbuf; tokenstream lexbuf }
| "{" { LEFTBRACE }
| "}" { RIGHTBRACE }
| "[" { LEFTBRACKET }
| "]" { RIGHTBRACKET }
| "," { COMMA }
| int { INT (int (LexBuffer<_>.LexemeString lexbuf))}
| float { FLOAT (float (LexBuffer<_>.LexemeString lexbuf))}
| _    		{ failwith ("ParseError" + LexBuffer<_>.LexemeString lexbuf) }
| eof   	{ EOF }