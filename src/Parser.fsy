%{
open Json
%}

// The start token becomes a parser function in the compiled code:
%start start

%token LEFTBRACE
%token RIGHTBRACE
%token <int> INT 
%token <float> FLOAT
%token <string> STRING
%token LEFTBRACKET
%token RIGHTBRACKET
%token COMMA
%token COLON

%token EOF

// This is the type of the data produced by a successful reduction of the 'start'
// symbol:
%type <Value> start

%%

// These are the rules of the grammar along with the F# code of the 
// actions executed as rules are reduced.  
start: 
  | value { $1 }
  
value:
  | STRING { String $1 }
  | INT { Int $1 }
  | FLOAT { Float $1 }
  | list { $1 }
  | object { $1 }

list:
  | LEFTBRACKET RIGHTBRACKET { List [] }
  | LEFTBRACKET list_values RIGHTBRACKET { List (List.rev $2) }

list_values:
  | value { [$1] }
  | list_values COMMA value { $3 :: $1 }

object:
  | LEFTBRACE RIGHTBRACE { Object Map.empty }
  | LEFTBRACE object_properties RIGHTBRACE { Object (Map $2) }

object_properties: 
  | STRING COLON value { [($1, $3)] }
  | COMMA object_properties STRING COLON value { ($3, $5) :: $2 }

// Using F# keywords for nonterminal names is okay.
end: EOF { 3 }
